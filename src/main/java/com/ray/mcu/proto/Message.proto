package proto;

option java_package = "com.ray.mcu.proto";
option java_outer_classname = "MessageProto";

message Message {
    oneof messages {
        TextMessage textMsg = 1;
        IntMessage intMsg = 2;
        RequestRegisterMessage reqRegMsg = 3;
        RegisterMessage regMsg = 4;
        RequestUnregisterMessage reqUnregMsg = 5;
        UnregisterMessage unregMsg = 6;
        ClientMessage clientMsg = 7;
        PersistClientMessage persClientMsg = 8;
        ClientResponse response = 9;
        PrePrepare prePrepare = 10;
        Prepare prepare = 11;
        Commit commit = 12;
        RecoverCommit recoverCommit = 13;
        RequestRecoverPrePrepare requestRecoverPrePrepare= 14;
        RequestRecoverCommit requestRecoverCommit = 15;
    }
    required bytes sig = 16;
}

// ---------------------------------------- Test Messages ---------------------------------------- //


message TextMessage {
    required string text = 1;
}

message IntMessage {
    required int32 i = 1;
}

// ---------------------------------------- Server/Server Messages ---------------------------------------- //

// Request by a replica to register with the network.
message RequestRegisterMessage {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
}

// Request by replica to unregister from the network.
message RequestUnregisterMessage {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
}

// Message sent by the coordinator to register a replica.
message RegisterMessage {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
}

// Message sent by the coordinator to unregister a replica.
message UnregisterMessage {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
    required bytes signature = 7;
}

// ---------------------------------------- Client/Server Messages ---------------------------------------- //

// Message sent by the client.
message ClientMessage {
    required int32 dif = 1;
    required bytes pkey = 2;
}

// Message sent by the client.
message PersistClientMessage {
    required ClientMessage msg = 1;
    required bytes sig = 2;
}

// Message sent to the client as response.
message ClientResponse {
    required bool response = 1;
}

// ---------------------------------------- Utility Messages ---------------------------------------- //

message Server {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
}

message View {
    required int32 id = 1;
    required int32 coordinator = 2;
    repeated Server servers = 3;
}

message Signature {
    required int32 id = 1;
    required bytes sig = 2;
}

message CommitStorage {
    repeated PersistClientMessage input = 1;
    required bytes inputHash = 2;
    required View view = 3;
    repeated Signature signatures = 4;
}

// ---------------------------------------- PBFT ---------------------------------------- //

message PrePrepare {
    repeated PersistClientMessage input = 1;
    required View view = 2;
}

message Prepare {
    required bytes inputHash = 1;
    required View view = 2;
}

message Commit {
    required bytes inputHash = 1;
    required View view = 2;
    repeated Signature signatures = 3;
}

// ---------------------------------------- PBFT Recovery ---------------------------------------- //

message RequestRecoverPrePrepare {
    required int32 viewId = 1;
}

message RequestRecoverCommit {
    required int32 viewId = 1;
}

message RecoverCommit {
    repeated CommitStorage commits = 1;
}
